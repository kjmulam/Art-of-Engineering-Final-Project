#include <Adafruit_GFX.h>    // Core graphics library
#include <Adafruit_ST7735.h> // Hardware-specific library
#include <SPI.h>


// For the breakout, you can use any 2 or 3 pins
// These pins will also work for the 1.8" TFT shield
#define TFT_CS     10
#define TFT_RST    9  // you can also connect this to the Arduino reset
// in which case, set this #define pin to -1!
#define TFT_DC     8

Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS,  TFT_DC, TFT_RST);

#define TFT_SCLK 13   // set these to be whatever pins you like!
#define TFT_MOSI 11   // set these to be whatever pins you like!


float p = 3.1415926;

int match = 0;
int t = 0;
int universalt = 0;

void setup(void) {
  Serial.begin(9600);
  Serial.print("Hello! ST7735 TFT Test");

  // Use this initializer if you're using a 1.8" TFT
  tft.initR(INITR_BLACKTAB);   // initialize a ST7735S chip, black tab

  // Use this initializer (uncomment) if you're using a 1.44" TFT
  //tft.initR(INITR_144GREENTAB);   // initialize a ST7735S chip, black tab

  // Use this initializer (uncomment) if you're using a 0.96" 180x60 TFT
  //tft.initR(INITR_MINI160x80);   // initialize a ST7735S chip, mini display

  Serial.println("Initialized");

  uint16_t time = millis();
  tft.fillScreen(ST7735_BLACK);
  time = millis() - time;

  Serial.println(time, DEC);
  delay(500);

  pinMode(2, INPUT);
  pinMode(4, INPUT);

  int rb = 2;
  int bb = 4;
  int yd = A0;
  int xd = A1;
  bopitscreen();
  directions();
  readyScreen();
  boolean game = true;
  int rounds = 0;
  t = 4000;
  universalt = millis();
  while (game == true) {
    randomButtonGen();
    boolean punch = false;
    if (match == 1) {
      punch = isBlueButtonDown();
      Serial.println("blue");
    }
    else if (match == 2) {
      punch = isRedButtonDown();
      Serial.println("red");
    }
    else if (match == 3) {
      punch = isUpArrowPressed();
      Serial.println("up");
    }
    else if (match == 4) {
      punch = isDownArrowPressed();
      Serial.println("down");
    }
    else if (match == 5) {
      punch = isRightArrowPressed();
      Serial.println("right");
    }
    else {
      punch = isLeftArrowPressed();
      Serial.println("left");
    }
    if (punch == true)
    {
      rounds++;
      t += (-100);
      universalt = millis();
    }
    else
    {
      tft.setRotation(1);
      tft.setTextWrap(true);
      tft.fillScreen(0x000F);
      tft.setCursor(0, 30);
      tft.setTextColor(0xFFFF);
      tft.setTextSize(4);
      tft.println("You");
      tft.println("lose!");
      delay(2000);
      tft.setRotation(1);
      tft.setTextWrap(false);
      tft.fillScreen(0x000F);
      tft.setCursor(0, 30);
      tft.setTextColor(0xFFFF);
      tft.setTextSize(2);
      tft.println("Rounds ");
      tft.println("Completed:");
      tft.println(rounds);
      delay(2000);
      game = false;
    }
  }
}

void loop() {

}

void test() {
  boolean tester = true;
  while (tester)
  {
    int buttonState = analogRead(A0);
    if (buttonState < 200) {
      Serial.println("WOO");
      delay(500);
      tester = false;
    }
  }
}

void readyScreen() {
  delay(1000);
  tft.setRotation(1);
  tft.setTextWrap(true);
  tft.fillScreen(0x000F);
  tft.setCursor(0, 30);
  tft.setTextColor(0xFFFF);
  tft.setTextSize(4);
  tft.println("READY");
  delay(2000);
  tft.fillScreen(0x000F);
  tft.setCursor(0, 30);
  tft.println("3");
  delay(1000);
  tft.fillScreen(0x000F);
  tft.setCursor(0, 30);
  tft.println("2");
  delay(1000);
  tft.fillScreen(0x000F);
  tft.setCursor(0, 30);
  tft.println("1");
  delay(1000);
  tft.fillScreen(0x000F);
  tft.setCursor(0, 30);
  tft.println("GO!");
}

void bopitscreen() {
  tft.setRotation(1);
  tft.setTextWrap(true);
  tft.fillScreen(0x000F);
  tft.setCursor(0, 30);
  tft.setTextColor(0xFFFF);
  tft.setTextSize(4);
  tft.println("BOP IT");
  tft.setTextColor(0x03EF);
  tft.setTextSize(2);
  tft.println("A game by");
  tft.setTextSize(2);
  tft.println("#SEAS");
  tft.println("GetDegrees");
}

void directions() {
  delay(1000);
  tft.setRotation(1);
  tft.setTextWrap(false);
  tft.setCursor(0, 30);
  tft.fillScreen(0x000F);
  tft.setTextColor(0x03EF);
  tft.setTextSize(2);
  tft.println("Follow the");
  tft.println("arrows and");
  tft.println("buttons!");
}

void bluebutton() {
  tft.setRotation(0);
  tft.fillScreen(ST7735_CYAN);
  tft.drawCircle(64, 80, 60, ST7735_WHITE);
  tft.fillCircle(64, 80, 60, ST7735_BLUE);
}

void redbutton() {
  tft.setRotation(0);
  tft.fillScreen(0x7800);
  tft.drawCircle(64, 80, 60, ST7735_WHITE);
  tft.fillCircle(64, 80, 60, ST7735_RED);
}

void testtriangles() {
  tft.fillScreen(ST7735_BLACK);
  int color = 0x780F;
  int t;
  int w = tft.width() / 2;
  int x = tft.height() - 1;
  int y = 0;
  int z = tft.width();
  for (t = 0 ; t <= 15; t++) {
    tft.drawTriangle(w, y, y, x, z, x, color);
    x -= 4;
    y += 4;
    z -= 4;
    color += 100;
  }
}

void downArrow() {
  tft.setRotation(3);
  testtriangles();
}

void rightArrow() {
  tft.setRotation(2);
  testtriangles();
}

void leftArrow() {
  tft.setRotation(0);
  testtriangles();
}

void upArrow() {
  tft.setRotation(1);
  testtriangles();
}

boolean isRedButtonDown() {
  Serial.println("Red pressed");
  boolean hit = false;
  int buttonState = digitalRead(2);
  while (t > ((int)millis() - universalt) && hit == false) {
    if (buttonState == HIGH) {
      hit = true;
    }
    buttonState = digitalRead(2);
  }
  return hit;
}

boolean isBlueButtonDown() {
  Serial.println("Blue pressed");
  boolean hit = false;
  int buttonState = digitalRead(4);
  while (t > ((int)millis() - universalt) && hit == false) {
    if (buttonState == HIGH) {
      hit = true;
    }
    buttonState = digitalRead(4);
  }
  return hit;
}

boolean isUpArrowPressed() {
  boolean hit = false;
  int buttonState = analogRead(A0);
  while (t > ((int)millis() - universalt) && hit == false) {
    if (buttonState < 200) {
      hit = true;
    }
    buttonState = analogRead(A0);
  }
  return hit;
}
boolean isDownArrowPressed() {
  boolean hit = false;
  int buttonState = analogRead(A0);
  while (t > ((int)millis() - universalt) && hit == false) {
    if (buttonState > 800) {
      hit = true;
    }
    buttonState = analogRead(A0);
  }
  return hit;
}
boolean isLeftArrowPressed() {
  boolean hit = false;
  int buttonState = analogRead(A1);
  while (t > ((int)millis() - universalt) && hit == false) {
    if (buttonState < 200) {
      hit = true;
    }
    buttonState = analogRead(A1);
  }
  return hit;
}
boolean isRightArrowPressed() {
  boolean hit = false;
  int buttonState = analogRead(A1);
  while (t > (millis() - universalt) && hit == false) {
    if (buttonState > 800) {
      hit = true;
    }
    buttonState = analogRead(A1);
  }
  return hit;
}

void randomButtonGen() {
  randomSeed(analogRead(0));
  int r = (int)(random(0, 6));
  if (r == 0) {
    bluebutton();
    match = 1;
  }
  else if (r == 1) {
    redbutton();
    match = 2;
  }
  else if (r == 2) {
    upArrow();
    match = 3;
  }
  else if (r == 3) {
    downArrow();
    match = 4;
  }
  else if (r == 4) {
    rightArrow();
    match = 5;
  }
  else {
    leftArrow();
    match = 6;
  }
}
